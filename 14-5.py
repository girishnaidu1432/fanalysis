import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import openai

# OpenAI API Configuration (Azure)
openai.api_key = "14560021aaf84772835d76246b53397a"
openai.api_base = "https://amrxgenai.openai.azure.com/"
openai.api_type = 'azure'
openai.api_version = '2024-02-15-preview'
deployment_name = 'gpt'

st.set_page_config(layout="wide")
st.title("Per-File Sales Agent Performance & LLM Chatbot")

# Function to call LLM
def analyze_chatbot(question, df):
    prompt = f"""
    Analyze the following data and answer the question concisely but informatively.
    Data:
    {df.to_string(index=False)}
    
    Question: {question}
    """
    response = openai.ChatCompletion.create(
        engine=deployment_name,
        messages=[ 
            {"role": "system", "content": "You are a data analyst. Provide structured, easy-to-understand answers using bullet points and summaries."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.5
    )
    return response["choices"][0]["message"]["content"].strip()

# Simulate checklist evaluation
def evaluate_market_checklist(response_text):
    checklist = {
        "🥣 Eating Habits": "Typical food prep methods",
        "👥 Demographics": "Age distribution",
        "🏷️ Competition": "top 3 local competitors",
        "💸 Pricing": "average income",
        "🛍️ Distribution": "Online vs retail",
        "📢 Marketing": "Influencer culture",
        "📚 Education": "product demos",
        "🍛 Recipe Localization": "Popular regional cuisines",
        "🔧 After-sales": "service centers",
        "🌿 Sustainability": "Eco-awareness",
        "⚖️ Regulatory": "appliance safety laws",
        "📈 Sales Forecast": "6-month and 1-year prediction"
    }

    checklist_results = []
    for area, focus in checklist.items():
        if focus.lower() in response_text.lower():
            result = ("Pass", f"Includes: {focus}")
        else:
            result = ("Fail", f"Missing: {focus}")
        checklist_results.append((area, focus, result[0], result[1]))
    return checklist_results

# Plotting function
def plot_trend(df, group_by_col, value_col, title):
    trend_data = df.groupby(group_by_col)[value_col].sum().reset_index()
    fig, ax = plt.subplots(figsize=(8, 3))
    ax.bar(trend_data[group_by_col], trend_data[value_col], color="skyblue")
    plt.xticks(rotation=90, ha='right', fontsize=8)
    plt.title(title)
    plt.tight_layout()
    st.pyplot(fig)

# File reading helper
def read_file(file):
    try:
        if file.name.endswith('.csv'):
            return pd.read_csv(file, encoding="utf-8")
    except Exception:
        try:
            return pd.read_csv(file, encoding="ISO-8859-1")
        except Exception:
            return pd.read_csv(file, encoding="latin1")
    if file.name.endswith(('.xls', '.xlsx')):
        return pd.read_excel(file)
    return None

# Upload files
uploaded_files = st.file_uploader("Upload CSV or Excel files", type=["csv", "xls", "xlsx"], accept_multiple_files=True)

if uploaded_files:
    for file in uploaded_files:
        st.markdown(f"---\n### 📁 File: `{file.name}`")

        try:
            df = read_file(file)
            if df is None or df.empty:
                st.warning(f"No valid data found in {file.name}")
                continue
        except Exception as e:
            st.error(f"Failed to read {file.name}: {e}")
            continue

        st.subheader("🔍 Data Preview")
        st.dataframe(df.head())

        # Summary chatbot
        st.subheader("📊 File Summary (Generated by LLM)")
        try:
            summary = analyze_chatbot("Please summarize the uploaded file.", df.head(20))
            st.write(summary)
        except Exception as e:
            st.error(f"Summary generation failed: {e}")
            continue

        # Top 10 Analysis
        if "PSU" in df.columns and "Last Name" in df.columns:
            df["PSU"] = pd.to_numeric(df["PSU"], errors="coerce").fillna(0)
            top_10 = df.sort_values(by="PSU", ascending=False).head(10)
            st.subheader("🏆 Top 10 Performers (by PSU)")
            st.dataframe(top_10[["Partner Id", "Last Name", "PSU", "Gross Earnings"]])

            st.subheader("📈 Trend Charts")
            if "Paid As Position" in df.columns:
                plot_trend(df, "Paid As Position", "Gross Earnings", "Gross Earnings by Role")
            if "Gender" in df.columns:
                plot_trend(df, "Gender", "Gross Earnings", "Earnings by Gender")

            # File-specific chatbot
            st.subheader("💬 Ask a Question About This File")
            question = st.text_input(f"Ask something about `{file.name}` data:", key=file.name)
            if st.button(f"Ask LLM ({file.name})", key=f"ask_{file.name}"):
                if question:
                    response = analyze_chatbot(question, df.head(50))
                    st.write("**Response:**", response)

            # 🌍 Sales prediction section
            st.subheader("🌍 Sales Prediction in New Countries")

            new_countries = ["Germany", "France", "Italy", "India", "USA", "Japan", "Brazil", "Singapore"]
            selected_country = st.selectbox(f"Select a country for prediction", new_countries)

            if st.button(f"Predict Sales for {selected_country}"):
                try:
                    features_prompt = f"""
You are a market analyst. Given the uploaded sales agent data and general market insights, analyze the opportunity for launching Thermomix by Vorwerk in the country: **{selected_country}**.

Please include the following sections with bullet points and concise insights:

### 1. **Product Overview**
- Key features and USPs of Thermomix
- Target consumer profile

### 2. **Country Market Evaluation: {selected_country}**
Analyze the following **12 key evaluation areas** in-depth. For each area:
- Provide detailed, country-specific insights covering all sub-points listed below.
- Explicitly **mention each of the following focus areas verbatim** in your response so the system can validate them.
- Structure your response such that it includes the **exact phrasing** like "Typical food prep methods", "average income", etc., directly in the bullet points.
- Ensure every evaluation area gets a **"Pass"** by addressing risks with mitigation strategies where needed.


**Checklist Areas:**

1. 🥣 **Eating Habits**
   - Typical food prep methods
   - Meal frequency and kitchen appliance use

2. 👥 **Demographics**
   - Age distribution, urban/rural split
   - Gender roles in cooking
   - Tech-savvy population segments

3. 🏷️ **Competition**
   - List top 3 local competitors (brands/products)
   - Compare their features, price, and market share

4. 💸 **Pricing**
   - Local affordability, average income
   - Financing options, EMIs, price positioning

5. 🛍️ **Distribution**
   - Online vs retail appliance market penetration
   - Preferred consumer buying channels

6. 📢 **Marketing**
   - Influencer culture, language preferences
   - Suitable localized marketing strategies

7. 📚 **Education & Onboarding**
   - Acceptance of product demos, tutorials
   - Existing cooking content formats and platforms

8. 🍛 **Recipe Localization**
   - Popular regional cuisines
   - Thermomix adaptability for those dishes

9. 🔧 **After-sales**
   - Need for service centers, typical warranty expectations
   - Local support partners if any

10. 🌿 **Sustainability**
    - Eco-awareness, energy consumption attitudes
    - Recyclability and repair regulations

11. ⚖️ **Regulatory Compliance**
    - Local appliance safety laws
    - Import/export certifications, food contact material rules

12. 📈 **Sales Forecast**
    - 6-month and 1-year prediction
    - Market share capture estimate

---

### 3. **Checklist Table Summary**
Finally, provide a table with the following format:
| Area | Focus | Evaluation (Pass/Fail) | Reason |
|------|-------|-------------------------|--------|
| Eating Habits | [key points] | Pass | [reason] |
| ... | ... | ... | ... |

✅ Ensure that **each row** provides sufficient evidence to **justify a "Pass"** where applicable.

If there are risks, suggest **mitigation strategies** to turn a Fail into a Pass.

Base all reasoning on real market trends and local context. Be detailed but concise.
"""
                    prediction_output = analyze_chatbot(features_prompt, df.head(50))
                    st.markdown("**📈 Prediction Output:**")
                    st.write(prediction_output)

                    st.subheader("✅ Market Entry Checklist Evaluation")
                    checklist = evaluate_market_checklist(prediction_output)
                    checklist_df = pd.DataFrame(checklist, columns=["Area", "Focus", "Evaluation (Pass/Fail)", "Reason"])
                    st.dataframe(checklist_df)

                except Exception as e:
                    st.error(f"Prediction generation failed: {e}")
